{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asad\\\\Downloads\\\\Compressed\\\\react-website-v1-master\\\\src\\\\components\\\\pages\\\\SignUp.js\";\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport '../../App.css';\n\n// NextERP API URL\nconst FRAPPE_BASE_URL = \"https://ups-uat.sowaanerp.com\";\nconst LOGIN_URL = `${FRAPPE_BASE_URL}/api/method/login`;\nconst CREATE_LEAD_URL = `${FRAPPE_BASE_URL}/api/resource/Lead`;\nconst USERNAME = \"mraza@ups.com\";\nconst PASSWORD = \"asadraza@123\";\nexport default function SignUp() {\n  // State to hold form input values\n  const [formData, setFormData] = useState({\n    city: '',\n    country: '',\n    weight: '',\n    productType: '',\n    comments: ''\n  });\n\n  // State for authentication session\n  const [csrfToken, setCsrfToken] = useState(null);\n\n  // Handle input changes and update state\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n\n  // Function to log in and get session cookies & CSRF token\n  const login = async () => {\n    try {\n      const response = await axios.post(LOGIN_URL, {\n        usr: USERNAME,\n        pwd: PASSWORD\n      }, {\n        withCredentials: true\n      } // Ensures session is stored\n      );\n      if (response.status === 200) {\n        console.log(\"Login successful!\", response.data);\n\n        // Extract CSRF token (if required by API)\n        const csrfToken = response.headers[\"x-csrf-token\"] || null;\n        setCsrfToken(csrfToken);\n        return true; // Login successful\n      }\n    } catch (error) {\n      console.error(\"Login failed:\", error.response ? error.response.data : error.message);\n      return false;\n    }\n  };\n\n  // Handle form submission and post to NextERP API\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const isLoggedIn = await login(); // Perform login\n    if (!isLoggedIn) {\n      alert(\"Login failed! Please check credentials.\");\n      return;\n    }\n    try {\n      // Lead data to be sent\n      const leadData = {\n        doctype: \"Lead\",\n        lead_name: formData.city,\n        // Using city as lead name (change as needed)\n        city: formData.city,\n        country: formData.country,\n        weight: formData.weight,\n        product_type: formData.productType,\n        comments: formData.comments,\n        status: \"Open\"\n      };\n\n      // Sending form data to NextERP API\n      const leadResponse = await axios.post(CREATE_LEAD_URL, leadData, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          ...(csrfToken && {\n            \"X-Frappe-CSRF-Token\": csrfToken\n          }) // Include CSRF token if available\n        },\n        withCredentials: true // Ensure cookies are sent\n      });\n      console.log(\"Lead created successfully:\", leadResponse.data);\n      alert(\"Lead created successfully!\");\n\n      // Reset form after successful submission\n      setFormData({\n        city: '',\n        country: '',\n        weight: '',\n        productType: '',\n        comments: ''\n      });\n    } catch (error) {\n      console.error(\"Failed to create lead:\", error.response ? error.response.data : error.message);\n      alert(\"There was an error creating the lead. Please try again.\");\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"names":["React","useState","axios","FRAPPE_BASE_URL","LOGIN_URL","CREATE_LEAD_URL","USERNAME","PASSWORD","SignUp","formData","setFormData","city","country","weight","productType","comments","csrfToken","setCsrfToken","handleChange","e","name","value","target","login","response","post","usr","pwd","withCredentials","status","console","log","data","headers","error","message","handleSubmit","preventDefault","isLoggedIn","alert","leadData","doctype","lead_name","product_type","leadResponse","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/Asad/Downloads/Compressed/react-website-v1-master/src/components/pages/SignUp.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport '../../App.css';\n\n// NextERP API URL\nconst FRAPPE_BASE_URL = \"https://ups-uat.sowaanerp.com\";\nconst LOGIN_URL = `${FRAPPE_BASE_URL}/api/method/login`;\nconst CREATE_LEAD_URL = `${FRAPPE_BASE_URL}/api/resource/Lead`;\n\nconst USERNAME = \"mraza@ups.com\";\nconst PASSWORD = \"asadraza@123\";\n\nexport default function SignUp() {\n  // State to hold form input values\n  const [formData, setFormData] = useState({\n    city: '',\n    country: '',\n    weight: '',\n    productType: '',\n    comments: ''\n  });\n\n  // State for authentication session\n  const [csrfToken, setCsrfToken] = useState(null);\n\n  // Handle input changes and update state\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n\n  // Function to log in and get session cookies & CSRF token\n  const login = async () => {\n    try {\n      const response = await axios.post(\n        LOGIN_URL,\n        { usr: USERNAME, pwd: PASSWORD },\n        { withCredentials: true } // Ensures session is stored\n      );\n\n      if (response.status === 200) {\n        console.log(\"Login successful!\", response.data);\n\n        // Extract CSRF token (if required by API)\n        const csrfToken = response.headers[\"x-csrf-token\"] || null;\n        setCsrfToken(csrfToken);\n\n        return true; // Login successful\n      }\n    } catch (error) {\n      console.error(\"Login failed:\", error.response ? error.response.data : error.message);\n      return false;\n    }\n  };\n\n  // Handle form submission and post to NextERP API\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const isLoggedIn = await login(); // Perform login\n    if (!isLoggedIn) {\n      alert(\"Login failed! Please check credentials.\");\n      return;\n    }\n\n    try {\n      // Lead data to be sent\n      const leadData = {\n        doctype: \"Lead\",\n        lead_name: formData.city, // Using city as lead name (change as needed)\n        city: formData.city,\n        country: formData.country,\n        weight: formData.weight,\n        product_type: formData.productType,\n        comments: formData.comments,\n        status: \"Open\"\n      };\n\n      // Sending form data to NextERP API\n      const leadResponse = await axios.post(\n        CREATE_LEAD_URL,\n        leadData,\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            ...(csrfToken && { \"X-Frappe-CSRF-Token\": csrfToken }) // Include CSRF token if available\n          },\n          withCredentials: true, // Ensure cookies are sent\n        }\n      );\n\n      console.log(\"Lead created successfully:\", leadResponse.data);\n      alert(\"Lead created successfully!\");\n\n      // Reset form after successful submission\n      setFormData({\n        city: '',\n        country: '',\n        weight: '',\n        productType: '',\n        comments: ''\n      });\n    } catch (error) {\n      console.error(\"Failed to create lead:\", error.response ? error.response.data : error.message);\n      alert(\"There was an error creating the lead. Please try again.\");\n    }\n  };\n\n  return (\n    <div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}